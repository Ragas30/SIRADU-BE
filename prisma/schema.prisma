// prisma/schema.prisma
generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // nyaman di Windows & siap deploy Debian
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(cuid())
  role            Role
  name            String
  email           String            @unique
  password        String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  reposisiHistory ReposisiHistory[]
  nurseDetail     NurseDetail[]
  DailyActivity   DailyActivity[]
  PatientHandle   PatientHandle[]
  RefreshToken    RefreshToken[]
}

model NurseDetail {
  id          String      @id @default(cuid())
  userId      String      @unique
  phone       String
  address     String
  nurseStatus NurseStatus
  user        User        @relation(fields: [userId], references: [id])
}

model DailyActivity {
  id        String   @id @default(cuid())
  nurseId   String
  date      DateTime @default(now())
  shiftType String?
  nurse     User     @relation(fields: [nurseId], references: [id])

  @@unique([nurseId, date])
}

enum NurseStatus {
  ON_SHIFT
  OFF_SHIFT
}

enum Role {
  KEPALA_PERAWAT
  PERAWAT
}

model Patient {
  id                  String            @id @default(cuid())
  name                String
  medicalRecordNumber String            @unique  // ← kolom DB benar2 bernama medicalRecordNumber
  birthDate           DateTime
  bedNumber           Int
  roomName            String?           // ← baru
  gender              Gender
  bradenQ             Int
  status              Status
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt

  reposisi            ReposisiHistory[]
  PatientHandle       PatientHandle[]
}

enum Gender {
  LAKI_LAKI
  PEREMPUAN
}

enum Status {
  ACTIVE
  NON_ACTIVE
}

enum Resiko {
  TINGGI
  SEDANG
  RENDAH
  SANGAT_TINGGI
}

model ReposisiHistory {
  id        String   @id @default(cuid())
  patientId String
  position  String
  nurseId   String
  bradenQ   Int
  Time      DateTime @default(now())
  foto      String?
  roomName  String?          // ← baru

  patient   Patient  @relation(fields: [patientId], references: [id])
  nurse     User     @relation(fields: [nurseId], references: [id])
}

model PatientHandle {
  id                 String    @id @default(cuid())
  patientId          String
  nurseId            String
  patient            Patient   @relation(fields: [patientId], references: [id])
  nurse              User      @relation(fields: [nurseId], references: [id])
  bradenQ            Int
  foto               String?
  status             Status    @default(ACTIVE)
  nextRepositionTime DateTime?
  roomName           String?   // ← baru
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  @@unique([patientId, nurseId])
  @@index([nextRepositionTime, status], name: "idx_next_repos_time_status")
}

model RefreshToken {
  id        String    @id @default(cuid())
  userId    String
  token     String    @unique
  createdAt DateTime  @default(now())
  expiresAt DateTime
  revokedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])

  @@index([userId])
}
